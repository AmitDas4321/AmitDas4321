<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg width="498" height="498" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 498 498">
  <!-- Transparent background -->
  <rect x="10" y="10" width="478" height="478" fill="none" stroke="none" />
  
  <!-- Container for typed code with a glowing effect -->
  <text id="codeText" text-anchor="middle" font-family="monospace" font-size="20" fill="#00ff00" style="filter: drop-shadow(0px 0px 8px #00ff00);"></text>
  
  <!-- Block-style blinking cursor -->
  <rect id="cursor" width="14" height="20" fill="#00ff00" style="filter: drop-shadow(0px 0px 8px #00ff00);"></rect>

  <script type="application/ecmascript"><![CDATA[
    (function() {
      // Code lines for typing
      const codeLines = [
        "(function",
        "repeat() {",
        "  eat();",
        "  sleep();",
        "  code();",
        "  repeat();",
        "})();"
      ];

      // Constants and state variables
      const svgWidth = 498;
      const svgHeight = 498;
      const charWidth = 12; // Approximate character width
      const lineHeight = 28; // Vertical spacing between lines
      const textStartX = svgWidth / 2; // Center horizontally
      const textStartY = (svgHeight - codeLines.length * lineHeight) / 2 + 10; // Center vertically
      const textElement = document.getElementById("codeText");
      const cursor = document.getElementById("cursor");
      let lineIndex = 0;
      let charIndex = 0;
      let currentLine = '';
      let cursorVisible = true;

      // Start typing effect
      function type() {
        if (lineIndex < codeLines.length) {
          if (charIndex < codeLines[lineIndex].length) {
            currentLine += codeLines[lineIndex][charIndex];
            updateText();
            charIndex++;
          } else {
            // Move to the next line
            lineIndex++;
            charIndex = 0;
            currentLine = '';
            setTimeout(type, 700); // Pause before typing the next line
            return;
          }
        } else {
          // Restart animation with a delay
          setTimeout(() => {
            resetAnimation();
            type();
          }, 2000);
          return;
        }
        // Random typing delay for a more natural effect
        setTimeout(type, Math.random() * 100 + 50);
      }

      // Update the text and cursor position
      function updateText() {
        textElement.innerHTML = '';
        for (let i = 0; i <= lineIndex; i++) {
          const tspan = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
          tspan.setAttribute("x", textStartX);
          tspan.setAttribute("dy", i === 0 ? textStartY : lineHeight);
          tspan.textContent = i === lineIndex ? currentLine : codeLines[i];
          textElement.appendChild(tspan);
        }
        // Update cursor position
        const cursorX = textStartX + currentLine.length * charWidth - 6;
        const cursorY = textStartY + lineIndex * lineHeight - 22;
        cursor.setAttribute("x", cursorX);
        cursor.setAttribute("y", cursorY);
      }

      // Reset animation
      function resetAnimation() {
        textElement.innerHTML = '';
        currentLine = '';
        lineIndex = 0;
        charIndex = 0;
      }

      // Blinking cursor animation
      function blinkCursor() {
        cursorVisible = !cursorVisible;
        cursor.style.opacity = cursorVisible ? "1" : "0";
        setTimeout(blinkCursor, 500);
      }

      // Initialize animations
      blinkCursor();
      type();
    })();
  ]]></script>
</svg>
