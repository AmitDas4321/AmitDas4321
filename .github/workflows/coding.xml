name: Generate Typing Animation

on:
  schedule: # Execute every 12 hours
    - cron: "0 */12 * * *"

  workflow_dispatch: # Allow manual trigger

  push:
    branches:
      - main

jobs:
  generate:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Generate the SVG animation
      - name: Generate typing_animation.svg
        run: |
          mkdir -p dist
          cat > dist/typing_animation.svg <<EOF
          <?xml version="1.0" encoding="UTF-8" standalone="no"?>
          <svg width="498" height="498" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 498 498">
            <rect x="10" y="10" width="478" height="478" fill="none" stroke="none" />
            <text id="codeText" text-anchor="middle" font-family="monospace" font-size="20" fill="#00ff00" style="filter: drop-shadow(0px 0px 8px #00ff00);"></text>
            <rect id="cursor" width="14" height="20" fill="#00ff00" style="filter: drop-shadow(0px 0px 8px #00ff00);"></rect>
            <script type="application/ecmascript"><![CDATA[
              (function() {
                const codeLines = [
                  "(function",
                  "repeat() {",
                  "  eat();",
                  "  sleep();",
                  "  code();",
                  "  repeat();",
                  "})();"
                ];
                const svgWidth = 498, svgHeight = 498, charWidth = 12, lineHeight = 28;
                const textStartX = svgWidth / 2, textStartY = (svgHeight - codeLines.length * lineHeight) / 2 + 10;
                const textElement = document.getElementById("codeText"), cursor = document.getElementById("cursor");
                let lineIndex = 0, charIndex = 0, currentLine = '', cursorVisible = true;
                function type() {
                  if (lineIndex < codeLines.length) {
                    if (charIndex < codeLines[lineIndex].length) {
                      currentLine += codeLines[lineIndex][charIndex];
                      updateText();
                      charIndex++;
                    } else {
                      lineIndex++; charIndex = 0; currentLine = ''; setTimeout(type, 700); return;
                    }
                  } else { setTimeout(() => { resetAnimation(); type(); }, 2000); return; }
                  setTimeout(type, Math.random() * 100 + 50);
                }
                function updateText() {
                  textElement.innerHTML = '';
                  for (let i = 0; i <= lineIndex; i++) {
                    const tspan = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
                    tspan.setAttribute("x", textStartX); tspan.setAttribute("dy", i === 0 ? textStartY : lineHeight);
                    tspan.textContent = i === lineIndex ? currentLine : codeLines[i];
                    textElement.appendChild(tspan);
                  }
                  const cursorX = textStartX + currentLine.length * charWidth - 6, cursorY = textStartY + lineIndex * lineHeight - 22;
                  cursor.setAttribute("x", cursorX); cursor.setAttribute("y", cursorY);
                }
                function resetAnimation() { textElement.innerHTML = ''; currentLine = ''; lineIndex = 0; charIndex = 0; }
                function blinkCursor() { cursorVisible = !cursorVisible; cursor.style.opacity = cursorVisible ? "1" : "0"; setTimeout(blinkCursor, 500); }
                blinkCursor(); type();
              })();
            ]]></script>
          </svg>
          EOF

      # Step 3: Push the generated SVG to a specific branch
      - name: Deploy to output branch
        uses: crazy-max/ghaction-github-pages@v3.1.0
        with:
          target_branch: output
          build_dir: dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
